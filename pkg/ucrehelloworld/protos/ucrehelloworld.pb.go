// Code generated by protoc-gen-go.
// source: ucrehelloworld.proto
// DO NOT EDIT!

/*
Package ucrehelloworld is a generated protocol buffer package.

It is generated from these files:
	ucrehelloworld.proto

It has these top-level messages:
	SayHelloRequest
	SayHelloResponse
*/
package ucrehelloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type SayHelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SayHelloRequest) Reset()                    { *m = SayHelloRequest{} }
func (m *SayHelloRequest) String() string            { return proto.CompactTextString(m) }
func (*SayHelloRequest) ProtoMessage()               {}
func (*SayHelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SayHelloResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *SayHelloResponse) Reset()                    { *m = SayHelloResponse{} }
func (m *SayHelloResponse) String() string            { return proto.CompactTextString(m) }
func (*SayHelloResponse) ProtoMessage()               {}
func (*SayHelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*SayHelloRequest)(nil), "ucrehelloworld.SayHelloRequest")
	proto.RegisterType((*SayHelloResponse)(nil), "ucrehelloworld.SayHelloResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for UcreHelloWorld service

type UcreHelloWorldClient interface {
	SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
}

type ucreHelloWorldClient struct {
	cc *grpc.ClientConn
}

func NewUcreHelloWorldClient(cc *grpc.ClientConn) UcreHelloWorldClient {
	return &ucreHelloWorldClient{cc}
}

func (c *ucreHelloWorldClient) SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	out := new(SayHelloResponse)
	err := grpc.Invoke(ctx, "/ucrehelloworld.UcreHelloWorld/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UcreHelloWorld service

type UcreHelloWorldServer interface {
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
}

func RegisterUcreHelloWorldServer(s *grpc.Server, srv UcreHelloWorldServer) {
	s.RegisterService(&_UcreHelloWorld_serviceDesc, srv)
}

func _UcreHelloWorld_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcreHelloWorldServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ucrehelloworld.UcreHelloWorld/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcreHelloWorldServer).SayHello(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UcreHelloWorld_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ucrehelloworld.UcreHelloWorld",
	HandlerType: (*UcreHelloWorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _UcreHelloWorld_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4d, 0x2e, 0x4a,
	0xcd, 0x48, 0xcd, 0xc9, 0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x43, 0x15, 0x55, 0x52, 0xe5, 0xe2, 0x0f, 0x4e, 0xac, 0xf4, 0x00, 0x09, 0x04, 0xa5,
	0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x3a, 0x5c, 0x02, 0x08, 0x65, 0xc5, 0x05, 0xf9, 0x79,
	0xc5, 0xa9, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0x30, 0xa5, 0x30, 0xae,
	0x51, 0x22, 0x17, 0x5f, 0x28, 0xd0, 0x1a, 0xb0, 0xf2, 0x70, 0x90, 0x35, 0x42, 0xfe, 0x5c, 0x1c,
	0x30, 0xfd, 0x42, 0xf2, 0x7a, 0x68, 0x2e, 0x43, 0x73, 0x80, 0x94, 0x02, 0x6e, 0x05, 0x10, 0xab,
	0x95, 0x18, 0x92, 0xd8, 0xc0, 0xde, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x2b, 0x79,
	0xf4, 0xe6, 0x00, 0x00, 0x00,
}
